package com.github.rcd47.x2data.lib.savegame;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.channels.FileChannel;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;

import com.github.rcd47.x2data.lib.history.X2HistoryReader;
import com.github.rcd47.x2data.lib.unreal.UnrealUtils;

public class X2SaveGameReader {
	
	/**
	 * Parses the save game header.
	 * When this method returns, the {@link FileChannel} is positioned appropriately for {@link X2HistoryReader}.
	 * @param in The file to read. The caller is responsible for closing this.
	 * @return The parsed header
	 * @throws IOException If the header can't be read for some reason
	 */
	public X2SaveGameHeader readHeader(FileChannel in) throws IOException {
		/*
		 * The structure of the header mostly (but not completely) matches SaveGameHeader in OnlineSubsystem.
		 * Note that bools appear to be represented as ints, presumably because that's how it works in C.
		 * 
		 * 1. int: VersionNumber. 0x14 for XCOM2, 0x15 for XCOM 2 WOTC, 0x16 for XCOM 2 WOTC after TLP.
		 * 2. int: HeaderSize. Data to be read by X2HistoryReader starts at this position in the file.
		 * 3. int: unknown. Possibly corresponds to HeaderCRC.
		 * TODO just discovered https://github.com/danarcher/XCom2ModTool/blob/master/SaveGameFormat.md
		 * which says #3 is HeaderCRC which is calculated using CRC32B. confirm and document that.
		 * 
		 * UncompressedSize is listed at this point in SaveGameHeader but isn't at this position.
		 * Or possibly it's always set to 0 for some reason and this is indeed #4.
		 * 
		 * 4. int: unknown. Seems to always be 0.
		 * 5. int: GameNum. Campaign number.
		 * 6. int: SaveID. Save slot number.
		 * 
		 * SaveDataCRC is listed at this point in SaveGameHeader but isn't at this position.
		 * 
		 * 7. string: Description, as generated by the game.
		 * 8. string: Time. When the game was saved. Format is M/D/Y\nHH:MM
		 * 9. string: MapCommand. Presumably used to load into the correct map.
		 * 10. int: bIsTacticalSave
		 * 11. int: bIsIronman
		 * 12. int: bIsAutosave
		 * 13. int: unknown. Seems to always be 0.
		 *     Possibly bIsQuicksave, but if so there's a bug because it was still 0 even for a quicksave I created in tactical.
		 * 
		 * DLCPacks is listed at this point in SaveGameHeader but isn't at this position.
		 * It is marked as deprecated so possibly it isn't serialized at all anymore.
		 * Or possibly it is #13 or #16, since a zero-length string gets serialized as 0.
		 * 
		 * 14. string: Language
		 * 
		 * bIsTacticalSave, bIsIronman, bIsAutosave, and bIsQuicksave are listed at this point in SaveGameHeader but were found above.
		 * 
		 * 15. int: unknown. Possibly SaveDataCRC since it wasn't at the expected position above.
		 * 16. int: unknown. Seems to always be 0.
		 * 17. int: ArchiveFileVersion. Always 845.
		 * 18: int: ArchiveFileLicenseeVersion. Always 120.
		 * 19. string: CampaignStartTime. When the campaign was started. Format is yyyy.mm.dd-hh.mm.ss.
		 * 20. string: MapImage. Points to a UILibrary asset. Presumably the image that the game uses as the preview for the save file.
		 * 21. string: PlayerSaveDesc. The name that the player chose for the save file.
		 * 22. list of strings: DLCPackNames. The internal names for all DLCs/mods that are in use.
		 * 23. list of strings: DLCPackFriendlyNames. The human-friendly names for all DLCs/mods that are in use.
		 * 
		 * Fields after this point only exist in WOTC and TLP saves.
		 * 
		 * 24. int: Mission. The number of tactical missions that have happened. If this is a tactical save, that includes the current mission.
		 * 25. int: Month. The number of months that have passed in-game. Starts at 1.
		 * 26. int: Turn. The number of turns that have elapsed in the current tactical mission. If this is not a tactical save, value is 0.
		 * 27. int: Action. The number of actions the player has performed on this turn. If this is not a tactical save, value is 0.
		 * 
		 * bDebugSave, bPreMission, bPostMission, and bLadder are listed at this point in SaveGameHeader but aren't at this position.
		 * Suspect these are at #29 and #30 below. I don't think it matters though.
		 * bDebugSave, bPreMission, and bPostMission will always be false unless special debug logic is enabled.
		 * Haven't tried it so I don't know what it does differently from a non-debug save. Possibly nothing, and these are just flags.
		 * bLadder is a bit more mysterious since ladders are .x2hist files, not regular saves.
		 * Possibly ladders used regular saves at some earlier point during development.
		 * 
		 * 28: string: MissionType. Appears to correspond to the MissionFamily in XComMissionDefs.ini.
		 *     If this is not a tactical save, it appears this contains the mission type of the last tactical mission.
		 * 29: 12 unknown bytes. Seems to always be 0.
		 * 
		 * Fields after this point only exist in TLP saves.
		 * 
		 * 30: 4 unknown bytes. Seems to always be 0.
		 * 
		 * Data to be read by X2HistoryReader starts here.
		 */
		
		var header = new X2SaveGameHeader();
		
		// read header size
		ByteBuffer buffer = ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN);
		in.position(in.position() + 4);
		in.read(buffer);
		header.historyPosition = buffer.flip().getInt();
		
		// read entire header
		buffer = ByteBuffer.allocate(header.historyPosition).order(ByteOrder.LITTLE_ENDIAN);
		in.position(in.position() - 8);
		in.read(buffer);
		buffer.flip();
		
		// determine which version of the game created the save
		switch (buffer.getInt()) {
			case 0x14:
				header.gameVersion = X2GameVersion.XCOM2;
				break;
			case 0x15:
				header.gameVersion = X2GameVersion.XCOM2_WOTC;
				break;
			case 0x16:
				header.gameVersion = X2GameVersion.XCOM2_WOTC_TLP;
				break;
			default:
				throw new IllegalArgumentException("Unrecognized game version number");
		}
		
		buffer.position(buffer.position() + 12); // skip #2 through #4
		header.campaignNumber = buffer.getInt();
		header.saveSlot = buffer.getInt();
		header.description = UnrealUtils.readString(buffer);
		header.creationTime = LocalDateTime.parse(UnrealUtils.readString(buffer), DateTimeFormatter.ofPattern("M/d/y\nHH:mm"));
		header.mapCommand = UnrealUtils.readString(buffer);
		header.tacticalSave = buffer.getInt() == 1;
		header.ironmanEnabled = buffer.getInt() == 1;
		header.autoSave = buffer.getInt() == 1;
		buffer.position(buffer.position() + 4); // skip #13
		header.language = UnrealUtils.readString(buffer);
		buffer.position(buffer.position() + 16); // skip #15 through #18
		header.campaignStartTime = LocalDateTime.parse(UnrealUtils.readString(buffer), DateTimeFormatter.ofPattern("yyyy.MM.dd-HH.mm.ss"));
		header.mapImage = UnrealUtils.readString(buffer);
		header.name = UnrealUtils.readString(buffer);
		
		int dlcCount = buffer.getInt();
		header.installedDlcAndMods = new ArrayList<>(dlcCount);
		for (int i = 0; i < dlcCount; i++) {
			header.installedDlcAndMods.add(new X2DlcNamePair(UnrealUtils.readString(buffer)));
		}
		if (buffer.getInt() != dlcCount) {
			// should never happen
			throw new IllegalStateException("DLC name lists do not have the same number of elements!");
		}
		for (int i = 0; i < dlcCount; i++) {
			header.installedDlcAndMods.get(i).friendlyName = UnrealUtils.readString(buffer);
		}
		
		if (header.gameVersion != X2GameVersion.XCOM2) {
			header.missionNumber = buffer.getInt();
			header.campaignMonth = buffer.getInt();
			header.tacticalTurn = buffer.getInt();
			header.tacticalAction = buffer.getInt();
			header.missionType = UnrealUtils.readString(buffer);
			buffer.position(buffer.position() + (header.gameVersion == X2GameVersion.XCOM2_WOTC ? 12 : 16)); // skip #29 and #30
		}
		
		if (buffer.hasRemaining()) {
			// should never happen
			throw new IllegalStateException("Did not consume entire header somehow?!");
		}
		
		return header;
	}
	
}
